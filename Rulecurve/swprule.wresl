/*************************************
swprule.wresl
 
Hao Xie DWR 5/24/2010

WRESL statements for SWP San Luis Rule Curve

This code calculates the target storage level for San Luis reservoir 
**************************************/

define SWPRULECV { std kind 'rulecurve' units 'TAF' }   !Decision variable of SWP San Luis rule curve

define SWP_Rule_DelTar {
  select  RuleCurve
  from    SWPrule_deltar
  given   deltar = swp_allocation_final
  use     linear}
define swp_rule_1 {alias SWP_Rule_DelTar units 'NONE'}

define SWP_Rule_Cap_Oroville {
  select  RuleCurve_Cap
  from    SWPrule_cap_Oroville
  given   oroville = S_Orovl(-1)
  use     linear}

define SWP_rule_Cap {alias SWP_Rule_Cap_Oroville units 'NONE'}

define OroDrainAmt4SL {value min(max(S_Orovl(-1) - OroSepTarg, 0.),
                                 max(S_SLSWPlevel4 - S_SLSWP(-1),0.) )}
define OroDrainAmtMon {value max(S_Orovl(-1) - OroNextMonTarg, 0.)}
!define ExpPmpAmtMon {value 60.} ! roughly 1000 cfs for the month
!define ExpPmpAmtMon {value 180.} ! roughly 3000 cfs for the month    !Changes for the IF operations
define ExpPmpAmtMon {
	case IF_SWP {
		condition	int(banksifswitch) == 1
		value		180.}		! roughly 3000 cfs for the month    !Changes for the IF operations
	case otherwise {
		condition	always
		value		60.}
}

!calculate the actual rule curve.
define SWPRULEcalcNoIF {
     case OctToDec {
          condition month >= oct .and. month <= dec
          value S_SLSWP(prevSep) + carryover_final * month/3.}
     case JanToFeb {
          condition month == jan .or. month == feb
          value     month/6. * SWP_Rule_DelTar}
     case MarthruApr {
          condition month == mar .or. month == apr
          value     SWP_Rule_DelTar}
     case May {
          condition month == may
          value max(min(S_SLSWP(-1) - (swpdemfinal_may - ExpPmpAmtMon) + OroDrainAmtMon,
		        SWPRuleDrainTar + (swpdemfinal_jun + swpdemfinal_jul + swpdemfinal_aug + swpdemfinal_sep - 4. * ExpPmpAmtMon)),
                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
     case June {
          condition month == jun
          value max(min(S_SLSWP(-1) - (swpdemfinal_jun - ExpPmpAmtMon) + OroDrainAmtMon,
		        SWPRuleDrainTar + (swpdemfinal_jul + swpdemfinal_aug + swpdemfinal_sep - 3. * ExpPmpAmtMon)),
                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
     case July {
          condition month == jul
          value max(min(S_SLSWP(-1) - (swpdemfinal_jul - ExpPmpAmtMon) + OroDrainAmtMon,
		        SWPRuleDrainTar + (swpdemfinal_aug + swpdemfinal_sep - 2. * ExpPmpAmtMon)),
                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
     case August {
          condition month == aug
          value max(min(S_SLSWP(-1) - (swpdemfinal_aug - ExpPmpAmtMon) + OroDrainAmtMon,
		        SWPRuleDrainTar + (swpdemfinal_sep - ExpPmpAmtMon)),
                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
     case Sep {
          condition always
          value max(min(S_SLSWP(-1) - (swpdemfinal_sep - ExpPmpAmtMon) + OroDrainAmtMon,
		        SWPRuleDrainTar),
                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
}

define SWPRULEcalcIF {
     case OctToDec {
          condition month >= oct .and. month <= dec
          value S_SLSWP(prevSep) + carryover_final * month/3.}
     case JanToFeb {
          condition month == jan .or. month == feb
!          value     month/6. * SWP_Rule_DelTar}
	   value S_SLSWP(-1)}
     case MarthruApr {
          condition month == mar .or. month == apr
!          value     SWP_Rule_DelTar}
	  value S_SLSWP(-1)}
     case May {
          condition month == may
!          value max(min(S_SLSWP(-1) - (swpdemfinal_may - ExpPmpAmtMon) + OroDrainAmtMon,
!		        SWPRuleDrainTar + (swpdemfinal_jun + swpdemfinal_jul + swpdemfinal_aug + swpdemfinal_sep - 4. * ExpPmpAmtMon)),
!                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
          value max(SWPRuleDrainTar,
		    SWPRuleDrainTar + (swpdemfinal_jun + swpdemfinal_jul + swpdemfinal_aug + swpdemfinal_sep - 4. * ExpPmpAmtMon))}
     case June {
          condition month == jun
!          value max(min(S_SLSWP(-1) - (swpdemfinal_jun - ExpPmpAmtMon) + OroDrainAmtMon,
!		        SWPRuleDrainTar + (swpdemfinal_jul + swpdemfinal_aug + swpdemfinal_sep - 3. * ExpPmpAmtMon)),
!                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
          value max(SWPRuleDrainTar,
		    SWPRuleDrainTar + (swpdemfinal_jul + swpdemfinal_aug + swpdemfinal_sep - 3. * ExpPmpAmtMon))}
     case July {
          condition month == jul
!          value max(min(S_SLSWP(-1) - (swpdemfinal_jul - ExpPmpAmtMon) + OroDrainAmtMon,
!		        SWPRuleDrainTar + (swpdemfinal_aug + swpdemfinal_sep - 2. * ExpPmpAmtMon)),
!                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
           value max(SWPRuleDrainTar,
		     SWPRuleDrainTar + (swpdemfinal_aug + swpdemfinal_sep - 2. * ExpPmpAmtMon))}
     case August {
          condition month == aug
!          value max(min(S_SLSWP(-1) - (swpdemfinal_aug - ExpPmpAmtMon) + OroDrainAmtMon,
!		        SWPRuleDrainTar + (swpdemfinal_sep - ExpPmpAmtMon)),
!                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
          value max(SWPRuleDrainTar,
		    SWPRuleDrainTar + (swpdemfinal_sep - ExpPmpAmtMon))}
     case Sep {
          condition always
!          value max(min(S_SLSWP(-1) - (swpdemfinal_sep - ExpPmpAmtMon) + OroDrainAmtMon,
!		        SWPRuleDrainTar),
!                    init_SWPRuleDrainTar + OroDrainAmt4SL)}
	  value SWPRuleDrainTar}
}

define SWPRULEcalc {
	case IF_SWP {
		condition	int(banksifswitch) == 1
		value		SWPRULEcalcIF
	}
	case otherwise {
		condition	always
		value		SWPRULEcalcNoIF
	}
}

define SWPRuleCalc_DV {alias SWPRuleCalc kind 'DEBUG' units 'NONE'}

define SWPRuleCalc1 {
  case octdec {
    condition month>=oct .and. month<=dec
    value max(S_SLSWPlevel2,min(SWPRuleCalc,S_SLSWPlevel4))}
  case other {
    condition always
    value max(S_SLSWPlevel2,min(SWPRuleCalc,S_SLSWPlevel4))}
 	
!    value max(S_SLSWPlevel2,min(SWPRuleCalc,SWP_Rule_Cap_Oroville,S_SLSWPlevel4))}
}
define SWPRuleCalc1_DV {alias SWPRuleCalc1 kind 'DEBUG' units 'NONE'}

goal setSWPRULECV { SWPRULECV = SWPRULEcalc1 }
