/*
delcar_cvp_south_B2BO.wresl

Nazrul Islam, DWR, 10/14/2010

This file will replace the Delivery_carryover_split_CVP_south.wresl which was only for D1641. This file includes B2 actions.
File determines CVP SOD delivery target based Water Supply, D1641 and Export Limits and Supply Limits;

Tom FitzHugh, BOR, 11/9/2010  Edited this file to add in BO allocation procedures, and switches to control 
selection of preBO vs BO procedures.
*/

! In May, get the VAMP export restriction computed last month
! (code is adapted from B2VampCommon.wresl)
! This code generates values used for preBO allocation procedures
define PulseHidv {std kind 'counter' UNITS 'NONE'}
if int(Dynamic_SJR)==1 {define VAMP_reqdv {std kind 'flow-requirement' units 'cfs'}}
define SJR_ANN     {std kind 'FLOW-CHANNEL'  units 'CFS'}
goal setSJR_ANN {SJR_ANN = C_SJRVER}

define JonesCapPermit_ {
	case D1485 {
		condition PUMP_DLTSW == 3
		select PermitCap_D1485 from JonesLimits where month=month}	
	case D1641 {
		condition always
		select PermitCap_D1641 from JonesLimits where month=month}
}

define BanksCapPermit1_ {
	case IFon {
		condition banksifswitch > 0.5 .or. jonesifswitch > 0.5
		select PermitCap1_BDCP from BanksLimits where month=month}
	case D1485 {
		condition PUMP_DLTSW == 3
		select PermitCap1_D1485 from BanksLimits where month=month}
	case D1641 {
		condition always
		select PermitCap1_D1641 from BanksLimits where month=month}	
}

define BanksCapPermit2_ {
	case IFon {
		condition banksifswitch > 0.5 .or. jonesifswitch > 0.5
		select PermitCap2_BDCP from BanksLimits where month=month}
	case IFoff {
		condition always
		select PermitCap2 from BanksLimits where month=month}
}		
		
define EWAReservedCap_ {select EWACap from BanksLimits where month=month}
define BanksCapPermit_ {value min(BanksCapPermit1_, BanksCapPermit2_ - EWAReservedCap_) }

define PulseExpRes1 {
    case OCT_APR {
         condition month >= OCT .and. month <= APR
         value 0.0 }
    case VAMPOff {
        condition month==MAY .and. VAMP_DLTSW == 0
        value JonesCapPermit_ + BanksCapPermit_ }
    case lo1 {
        condition month == MAY .and. abs(VAMP_reqdv(-1) - 5700.0)<.1
        value 2250. }
    case lo2 {
        condition month == MAY .and. VAMP_reqdv(-1)<5699.9
        value 1500. }
    case hi {
        condition month == MAY .and. VAMP_reqdv(-1) > 5700.1 .and. SJR_ANN(-1) < 8600.   !Alternates PulseExpRes1 from 1500 to 3000 every high year.
        value PulseHidv(-1)}
    case VernHi {
        condition month == MAY .and. SJR_ANN(-1) >= 8600.0
        value max(SJR_ANN(-1)*0.5,3000.0) }
    case others  {
        condition   always
        value       0.0}
}

define B2Action4On {timeseries kind 'TRIGGER' units 'NONE'}

! ***********************************************************
! Read in inputs used for BO allocation procedures
define estCVPExp_MarBO {select estimate from ExportEstimate_CVP where month = Mar}
define estCVPExp_AprBO {select estimate from ExportEstimate_CVP where month = Apr}
define estCVPExp_MayBO {select estimate from ExportEstimate_CVP where month = May}
define estCVPExp_JunBO {select estimate from ExportEstimate_CVP where month = Jun}
define estCVPExp_JulAugBO {select estimate from ExportEstimate_CVP where month = Jul}

define estCVPExp_WetApr {select WetSJR from ExportEstimate_CVP where month = Apr}
define estCVPExp_WetMay {select WetSJR from ExportEstimate_CVP where month = May}
define estCVPExp_WetJun {select WetSJR from ExportEstimate_CVP where month = Jun}

! is this a 60-20-20 wet year?
define wetSJR {
    case Wet {
        condition wyt_SJR == 1
        value 1.}
    case other {
        condition always
        value 0.}
}

! ***********************************************************
! Read in inputs used for both preBO and BO allocation procedures
define factCVP_MarAug {select factor from ExportEstimate_CVP where month = Mar}
define factCVP_AprAug {select factor from ExportEstimate_CVP where month = Apr}
define factCVP_MayAug {select factor from ExportEstimate_CVP where month = May}

define buffCVP_MarAug {select buffer from ExportEstimate_CVP where month = Mar}
define buffCVP_AprAug {select buffer from ExportEstimate_CVP where month = Apr}
define buffCVP_MayAug {select buffer from ExportEstimate_CVP where month = May}

! Define estimated exports for preBO (based on B2) and BO conditions.
define estCVPExp_Mar {
	case D1485 {
		condition int(RunBasis_DLTSW) == 0 
			value 4600.}
    case preBO {
        condition int(RunBasis_DLTSW) == 1 .or. int(jonesifswitch)  == 1
            value 4600. - 50. * taf_cfs }   
    case BO {                              
        condition int(RunBasis_DLTSW) == 2 
            value estCVPExp_MarBO }
    case other {
        condition always
            value 0.}
}

define estCVPExp_Apr {
	case D1485 {
		condition int(RunBasis_DLTSW) == 0 
			value 4600.	}
    case preBO {
        condition int(RunBasis_DLTSW) == 1  .or. int(jonesifswitch)  == 1
            value 1125. }
    case BO {
        condition int(RunBasis_DLTSW) == 2 
            value max(estCVPExp_AprBO, wetSJR*estCVPExp_WetApr) }
    case other {
        condition always
            value 0.}
}

define estCVPExp_May {
	case D1485 {
		condition int(RunBasis_DLTSW) == 0 
			value 4600.}
    case preBO_B2Action4On {
        condition int(RunBasis_DLTSW) == 1  .and. month == MAY .and. int(B2Action4) == 1 .and. int(B2Action4On)==1
            value PulseExpRes1*0.5 }
	case BO_IF_B2Action4On {
        condition int(jonesifswitch) == 1 .and. month == MAY .and. int(B2Action4) == 1 .and. int(B2Action4On)==1
            value PulseExpRes1*0.5 }
    case preBO_B2Action4Off {
        condition int(RunBasis_DLTSW) == 1  .and. month == MAY .and. int(B2Action4) == 0 .and. int(B2Action4On)==0
            value PulseExpRes1*0.5*15./31. + 3000.*16./31. }
	case BO_IF_B2Action4Off {
        condition int(jonesifswitch) == 1 .and. month == MAY .and. int(B2Action4) == 0 .and. int(B2Action4On)==0
            value PulseExpRes1*0.5*15./31. + 3000.*16./31. }
    case preBO_or_IF_otherwise {
        condition int(RunBasis_DLTSW) == 1 .or. int(jonesifswitch) == 1
            value 1125. }
    case BO_NoIF {
        condition int(RunBasis_DLTSW) == 2 
            value max(estCVPExp_MayBO, wetSJR*estCVPExp_WetMay) }
    case other {
        condition always
            value 0.}
}

define estCVPExp_Jun {
	case D1485 {
		condition int(RunBasis_DLTSW) == 0 
			value 4600.}
    case preBO {
        condition int(RunBasis_DLTSW) == 1 .or. int(jonesifswitch) == 1
            value 3000. }
    case BO {
        condition int(RunBasis_DLTSW) == 2
            value max(estCVPExp_JunBO, wetSJR*estCVPExp_WetJun) }
    case other {
        condition always
            value 0.}
}

define estCVPExp_JulAug {
	case D1485 {
		condition int(RunBasis_DLTSW) == 0
			value 4600.}
    case preBO {
        condition int(RunBasis_DLTSW) == 1 .or. int(jonesifswitch) == 1
            value 4600. }
    case BO {
        condition int(RunBasis_DLTSW) == 2
            value estCVPExp_JulAugBO }
    case other {
        condition always
            value 0.}
}

! Estimate Export Capability for use in determining delivery target limitations
define CVPDelCapEst {
    case March {
        condition month==MAR
        ! Taraky 20161005, DWR. Added South of Delta Storage expansion for CVP
        value estCVPExp_Mar*cfs_taf
            + estCVPExp_Apr*cfs_taf(1)
            + estCVPExp_May*cfs_taf(2)
            + estCVPExp_Jun*cfs_taf(3)
            + estCVPExp_JulAug*cfs_taf(4)
            + estCVPExp_JulAug*cfs_taf(5)
            + S_SLCVP(-1) + S_SLCVPE(-1) - buffCVP_MarAug + jbypass_del + AnnualBanksCVP }
    case April {
        condition month == APR
        ! Taraky 20161005, DWR. Added South of Delta Storage expansion for CVP
        value estCVPExp_Apr*cfs_taf
            + estCVPExp_May*cfs_taf(1)
            + estCVPExp_Jun*cfs_taf(2)
            + estCVPExp_JulAug*cfs_taf(3)
            + estCVPExp_JulAug*cfs_taf(4)
            + S_SLCVP(-1) + S_SLCVPE(-1) - buffCVP_AprAug + jbypass_del + AnnualBanksCVP }
    case May {
        condition month == MAY
        ! Taraky 20161005, DWR. Added South of Delta Storage expansion for CVP
        value estCVPExp_May*cfs_taf
            + estCVPExp_Jun*cfs_taf(1)
            + estCVPExp_JulAug*cfs_taf(2)
            + estCVPExp_JulAug*cfs_taf(3)
            + S_SLCVP(-1) + S_SLCVPE(-1) - buffCVP_MayAug + jbypass_del + AnnualBanksCVP }
    case otherwise {
        condition always
        value 0.0 }
    }
define CVPDelCapEstdv {alias CVPDelCapEst kind 'DELIV-CAPACITY' units 'TAF'}

define AnnDelCapEst {
    case March {
        condition month==MAR
        value CVPDelCapEst/factCVP_MarAug }
    case April {
        condition month == APR
        value CVPDelCapEst/factCVP_AprAug }
    case May {
        condition month == MAY
        value CVPDelCapEst/factCVP_MayAug }
    case otherwise {
        condition always
        value 0.0 }
    }

define AnnDelCapEstdv {alias AnnDelCapEst kind 'DELIV-CAPACITY' units 'TAF'}

define del_first_cvp_s {
  case MarToMay_FAM_IF {                                ! from the delivery-carryover table
    condition AllocationSwitch == 2 .and. JonesIFSwitch ==1 .and. (month >= MAR .and. month <= MAY)
    value min(AnnDelCapEst, CVP_Delivery_South[FAM])}
  case MarToMay_FAM {                                ! from the delivery-carryover table
    condition AllocationSwitch == 2 .and. (month >= MAR .and. month <= MAY)
    value min(AnnDelCapEst, CVP_Delivery_South[FAM])}
  case MarMay {
    condition month >= MAR .and. month <= MAY
    value min(AnnDelCapEst, Export_Index_CVP_adj/factCVP_AprAug) }
  case other {
    condition always
    value 0.}
}

define deltar_cvps1dv {alias del_first_cvp_s kind 'DEL-TARGET' units 'TAF'}

! Moved this logic from delcar_cvp_sys.wresl because Stage 1 transfers should not increase NOD allocations LGB

define del_second_cvp_s {value min(del_first_cvp_s , acvpdem_total_s)} ! Added logic to include Stage 1 Transfers in the delivery target LGB

define deltar_cvps2dv {alias del_second_cvp_s kind 'DEL-TARGET' units 'TAF'}

define deltar_cvp_sdv {std kind 'DEL-TARGET' units 'taf'}

define del_third_cvp_s {
  case initialdel {
    condition month <= FEB .and. wateryear == 1922
    value acvpdem_total_s }
  case march_april {
    condition month >= MAR .and. month <=MAY
    value del_second_cvp_s }
  case other {
    condition always
    value max(deltar_cvp_sdv(-1), del_second_cvp_s) }
}

define deltar_cvp_s {value min(del_third_cvp_s, acvpdem_total_s) }

goal save_deltar_cvp_s {deltar_cvp_sdv = deltar_cvp_s}
