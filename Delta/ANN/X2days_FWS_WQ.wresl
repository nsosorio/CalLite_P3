/*************************************
X2days_FWS.wresl
 
Nazrul Islam, DWR, 08/19/2010

Z.Q. Richard Chen, DWR 05/25/2011 
Set X2Roe_DLTSW switch to control X2_Reo_Trigger
*************************************/

! X2 setup for WQCP and FWS Action 4 requirements
! define FallX2 {select Option from options where Index=1} 

! FWS BO Action 4 - Storage Release for X2 outflow capped to inflow
define InfForX2Nov {
    case November {
        condition month==NOV .and. wyt_SAC <= 2
        value I_Wkytn + I_Shsta + I_Orovl + I_Folsm}
    case otherwise {
        condition always
        value 0. }
}
define InfForX2Nov_dv {alias InfForX2Nov kind 'FLOW-FWSBOA4-MIN' units 'CFS'}

! FWS BO Action 4 - Minimum outflow for off ramping in December (make sure to release any November storage gain)
/** this code is not being used
define NovStoredI {
      case Dec {
          condition  month == DEC .and. wyt_SAC <= 2  ! FWS BO (Dec 08) Action 4 - Fall X2
          value max(0., I_wkytn(-1) + D_ClearTu(-1) - C_Wkytn(-1) - D_Spring(-1))
              + max(0., I_Shsta(-1) - C_Shsta(-1))
              + max(0., I_Orovl(-1) - C_Orovl(-1))
              + max(0., I_Folsm(-1) - C_Folsm(-1))}
    case otherwise {
        condition always
        value 0. }
}

define A4NovStoredI_dv {alias NovStoredI kind 'FLOW-FWSBOA4-MIN' units 'CFS'}
**/
! add november stored water to wqcp DO for december FWS action 4 implementation
define flowmin_DecA4 {
!    case WetAA_December {
!        condition month == DEC .and. wyt_SAC <= 2
!        value mrdo_finaldv[monthlyweighted] + NovStoredI}
!    case otherwise {
!        condition always
        value 0.0}
!}
define flowmin_DecA4dv {alias flowmin_DecA4 kind 'flow-fwsboa4-min' units 'cfs'}

! set the flow cap for each station (cfs). this is max flow to meet X2 at each station
define flowcap_roe {       ! cfs for Roe Island/Port Chicago
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          value 29200. }
     case othermonths {
          condition      always
          value 99999. }
}
define flowcap_chs {       ! cfs for Chipps Island
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          value 11400. }
     case AUG_FWS {
          condition      month == AUG .and. FallX2 == 1
          value 11400. }
     case SEP {
          condition      month == SEP .and. FallX2 == 1
          value 99999. }
     case OCT {
          condition      month == OCT .and. FallX2 == 1
          value 99999. }
     case NOV_FWS {
          condition      month == NOV .and. FallX2 == 1
          value /*mrdo_finaldv[BASE]*/ DO_req_flow_ex + InfForX2Nov }
     case othermonths {
          condition      always
          value 99999. }
}
define flowcap_cnf {       ! cfs for Confluence (Sac & SJR)
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          value 7100. }
     case AUG_FWS {
          condition      month == AUG .and. FallX2 == 1
          value 7100. }
     case SEP {
          condition      month == SEP .and. FallX2 == 1
          value 99999. }
     case OCT {
          condition      month == OCT .and. FallX2 == 1
          value 99999. }
     case NOV_FWS {
          condition      month == NOV .and. FallX2 == 1
          value /*mrdo_finaldv[BASE]*/ DO_req_flow_ex + InfForX2Nov  }
     case othermonths {
          condition      always
          value 99999. }
}

! set the trigger value which activates the operation of Roe X2 standard
define trigger_x2roe {value 66.3 } ! km to just beyond Roe Island

! set the minimum flow for the circumstances in which there is no requirement at the confluence
!   ie. May_SRI < 8.1 maf, then no X2 standard
define flowmin_specX2 {value 4000. }         ! cfs for months (feb-june) in which no confluence req

! ******************************************************************************************
! Get the days required for X2 at each location (Roe, Chipps, Confluence)

define daysX2_roe {
     case Udef {
          condition      X2Udef_Select == 1
          value daysin }
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          select         roe_days
          from           x2days
          where          wateryear=wateryear,month=month    }
     case StandardOff {
          condition      always
          value          0.    }
}
!Defined elsewhere because needed for Vernalis_min
/*define daysX2_chs {
     case Udef {
          condition      X2Udef_Select == 1
          value 0 }
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          select         chs_days
          from           x2days
          where          wateryear=wateryear,month=month    }
     case Aug_FWS_W {
          condition      month == AUG .and. wyt_SAC <= 1 .and. FallX2 == 1 ! Aug ramped so it is in range of SEP target
          value          0.    }
     case Sep_FWS_W {
          condition      month == SEP .and. wyt_SAC <= 1 .and. FallX2 == 1 ! FWS BO (Dec 08) Action 4 - Fall X2 for Wet Years
          value          daysin    }
     case OctNov_FWS_W {
          condition      month <= NOV .and. wyt_SAC <= 1 .and. FallX2 == 1 ! FWS BO (Dec 08) Action 4 - Fall X2 for Wet Years
          value          daysin    }
     case StandardOff {
          condition      always
          value          0.    }
}*/
define daysX2_cnf {
     case Udef {
          condition      X2Udef_Select == 1
          value 0 }
     case FebtoJun {
          condition      month >= FEB .and. month <= JUN
          select         cnf_days
          from           x2days
          where          wateryear=wateryear,month=month    }
     case Aug_FWS_AN {
          condition      month == AUG .and. wyt_SAC <= 2 .and. FallX2 == 1  ! Aug ramped so it is in range of SEP target
          value          0.    }
     case Sep_FWS_AN {
          condition      month == SEP .and. wyt_SAC <= 2 .and. FallX2 == 1 ! FWS BO (Dec 08) Action 4 - Fall X2 for Above Normal Years
          value          daysin    }
     case OctNov_FWS_AN {
          condition      month <= NOV .and. wyt_SAC <= 2 .and. FallX2 == 1 ! FWS BO (Dec 08) Action 4 - Fall X2 for Above Normal Years
          value          daysin    }
     case StandardOff {
          condition      always
          value          0.    }
}

! ******************************************************************************************
! Modify the days at each location depending on whether the trigger for Roe has been tripped
! If   X2last > trigger then,
!              roe_days=0, chs_days=orig, cnf_days=daysinperiod - chs_days
! If   X2last < trigger then,
!              roe_days=orig, chs_days=orig-roe_days, cnf_days=daysin period-chs_days-roe_days
!
! NOTE: THE DAY MODIFICATION ASSUMES THAT CHS_DAYS >= ROE_DAYS.  IE.  WHEN YOU MEET ROE YOU
! AUTOMATICALLY MEET CHIPPS. BE SURE TABLE 'X2DAYS' IS SET PROPERLY.

define daysX2_roe_mod {
     case RoeTrigOutofSeasonJan {
          condition      month <= JAN .and. FallX2 == 1       ! If outside D1641 standard X2 season don't do this adjustment
          value          0.    }
     case RoeTrigOutofSeasonJul {
          condition      month >= JUL .and. FallX2 == 1       ! If outside D1641 standard X2 season don't do this adjustment
          value          0.    }

     case RoeOff_TriggerOn {
         condition      x2_last > trigger_x2roe .and. int(X2Roe_DLTSW) ==1
          value          0.    }
     case RoeOn {
          condition      always
          value          daysX2_roe }
}
define daysX2_chs_mod {  
     case RoeTrigOutofSeasonJan {
          condition      month <= JAN .and. FallX2 == 1       ! If outside D1641 standard X2 season don't do this adjustment
          value          daysX2_chs }
     case RoeTrigOutofSeasonJul {
          condition      month >= JUL .and. FallX2 == 1       ! If outside D1641 standard X2 season don't do this adjustment
          value          daysX2_chs }
     case RoeOff_TriggerOn {
         condition      x2_last > trigger_x2roe .and. int(X2Roe_DLTSW) ==1
          value          daysX2_chs }
     case RoeOn {
          condition      always
          value          daysX2_chs - daysX2_roe}
}


define daysX2_cnf_mod {  

     case SpecialStd {
          condition       daysX2_cnf > 0.5
          value           daysin - daysX2_chs_mod - daysX2_roe_mod}       ! days here make up the balance
     case StandardOff {                                                   ! for the period unless the original
          condition       always                                          ! days at cnf are zero.  in this case
          value           0.   }                                          ! there is no standard!!
}
define modroeday {alias daysX2_roe_mod kind 'debug' units 'none'}
define modchsday {alias daysX2_chs_mod kind 'debug' units 'none'}
define modcnfday {alias daysX2_cnf_mod kind 'debug' units 'none'}

! ******************************************************************************************
