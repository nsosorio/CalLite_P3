/*************************************
final-mrdo.wresl
 
Tom FitzHugh BOR 4/23/2010

This module finds the max Delta outflow requirement of all possible constraints
(Flow, Salinity, X2) and applies this at D_DeltaReqd

For CalLite, for now just implementing requirements from X2 and delta-outflow.wresl.

Commented code can be activated to implement salinity constraints.
*************************************/

! Define external function
!define getFinalMrdo {EXTERNAL f90}  ! OBJ code file must be located in run\external directory

! Determine max required flow of Flow standard, Salinity requirements, and X2
! External function 'getFinalMRDO' takes as input the Delta Outflow required (cfs), beginning
! day, and ending day for each standard.  Also takes the year, month, and days in month.

if int(NDO_DLTSW)==3 {
	define MRDO_final {value getFinalMrdo ( DO_req_X2roe, int(begday_roe),  int(endday_roe),
						DO_req_X2chs, int(begday_chs),  int(endday_chs),
						DO_req_X2cnf, int(begday_cnf),  int(endday_cnf),
						0., int(1), int(daysin), ! DO_req_emt1,  int(begday_emt1), int(endday_emt1),
						0., int(1), int(daysin), ! DO_req_emt2,  int(begday_emt2), int(endday_emt2),
						0., int(1), int(daysin), ! DO_req_jpt1,  int(begday_jpt1), int(endday_jpt1),
						0., int(1), int(daysin), ! DO_req_jpt2,  int(begday_jpt2), int(endday_jpt2),
						0., int(1), int(daysin), ! DO_req_col1,  int(begday_col1), int(endday_col1),
						0., int(1), int(daysin), ! DO_req_col2,  int(begday_col2), int(endday_col2),
						0., int(1), int(daysin), ! DO_req_rsl1,  int(begday_rsl1), int(endday_rsl1),
						0., int(1), int(daysin), ! DO_req_rsl2,  int(begday_rsl2), int(endday_rsl2),
						DO_req_flw1,  int(begday_flw1), int(endday_flw1),
						DO_req_flw2,  int(begday_flw2), int(endday_flw2),
						DO_req_flw3,  int(begday_flw3), int(endday_flw3),
						DO_req_flw4,  int(begday_flw4), int(endday_flw4),
						wateryear, month, daysin )
	}
}

else {
	define MRDO_final {value getFinalMrdo ( DO_req_X2roe, int(begday_roe),  int(endday_roe),
                                       	 	DO_req_X2chs, int(begday_chs),  int(endday_chs),
                                        	DO_req_X2cnf, int(begday_cnf),  int(endday_cnf),
                                        	0., int(1), int(daysin), ! DO_req_emt1,  int(begday_emt1), int(endday_emt1),
                                        	0., int(1), int(daysin), ! DO_req_emt2,  int(begday_emt2), int(endday_emt2),
                                        	0., int(1), int(daysin), ! DO_req_jpt1,  int(begday_jpt1), int(endday_jpt1),
                                        	0., int(1), int(daysin), ! DO_req_jpt2,  int(begday_jpt2), int(endday_jpt2),
                                        	0., int(1), int(daysin), ! DO_req_col1,  int(begday_col1), int(endday_col1),
                                        	0., int(1), int(daysin), ! DO_req_col2,  int(begday_col2), int(endday_col2),
                                        	0., int(1), int(daysin), ! DO_req_rsl1,  int(begday_rsl1), int(endday_rsl1),
                                        	0., int(1), int(daysin), ! DO_req_rsl2,  int(begday_rsl2), int(endday_rsl2),
                                        	DO_req_flow_ex,  int(begday_flw),  int(endday_flw), 
                                        	wateryear, month, daysin )
	}
}

define MRDO_finaldv {alias MRDO_final KIND 'FLOW-REQ-MRDO' UNITS 'CFS'}

define MRDO_X2nocap  {value getFinalMrdo ( DO_req_X2roe_nocap, int(begday_roe),  int(endday_roe),
                                        DO_req_X2chs_nocap, int(begday_chs),  int(endday_chs),
                                        DO_req_X2cnf_nocap, int(begday_cnf),  int(endday_cnf),
                                        0., int(1), int(daysin), ! DO_req_emt1,  int(begday_emt1), int(endday_emt1),
                                        0., int(1), int(daysin), ! DO_req_emt2,  int(begday_emt2), int(endday_emt2),
                                        0., int(1), int(daysin), ! DO_req_jpt1,  int(begday_jpt1), int(endday_jpt1),
                                        0., int(1), int(daysin), ! DO_req_jpt2,  int(begday_jpt2), int(endday_jpt2),
                                        0., int(1), int(daysin), ! DO_req_col1,  int(begday_col1), int(endday_col1),
                                        0., int(1), int(daysin), ! DO_req_col2,  int(begday_col2), int(endday_col2),
                                        0., int(1), int(daysin), ! DO_req_rsl1,  int(begday_rsl1), int(endday_rsl1),
                                        0., int(1), int(daysin), ! DO_req_rsl2,  int(begday_rsl2), int(endday_rsl2),
                                        DO_req_flow_ex,  int(begday_flw),  int(endday_flw),  
                                        wateryear, month, daysin )

}

define MRDO_X2nocapdv {std KIND 'FLOW-REQ-MRDO' UNITS 'CFS'}
goal saveMRDO_X2nocap {MRDO_X2nocapdv = MRDO_X2nocap }


! put the individual values into DSS for output purposes only
define DO_req_X2roe_out {alias DO_req_X2roe KIND 'FLOW-REQ-X2ROE' UNITS 'CFS'}
define DO_req_X2chs_out {alias DO_req_X2chs KIND 'FLOW-REQ-X2CHS' UNITS 'CFS'}
define DO_req_X2cnf_out {alias DO_req_X2cnf KIND 'FLOW-REQ-X2CNF' UNITS 'CFS'}
!define DO_req_emt1_out {alias DO_req_emt1 KIND 'FLOW-REQ-EMT1' UNITS 'CFS'}
!define DO_req_emt2_out {alias DO_req_emt2 KIND 'FLOW-REQ-EMT2' UNITS 'CFS' }
!define DO_req_jpt1_out {alias DO_req_jpt1 KIND 'FLOW-REQ-JPT1' UNITS 'CFS' }
!define DO_req_jpt2_out {alias DO_req_jpt2 KIND 'FLOW-REQ-JPT2' UNITS 'CFS' }
!define DO_req_col1_out {alias DO_req_col1 KIND 'FLOW-REQ-COL1' UNITS 'CFS' }
!define DO_req_col2_out {alias DO_req_col2 KIND 'FLOW-REQ-COL2' UNITS 'CFS' }
!define DO_req_rsl1_out {alias DO_req_rsl1 KIND 'FLOW-REQ-RSL1' UNITS 'CFS' }
!define DO_req_rsl2_out {alias DO_req_rsl2 KIND 'FLOW-REQ-RSL2' UNITS 'CFS' }
define DO_req_flow_out {alias DO_req_flow_ex KIND 'FLOW-REQ-NDOI' UNITS 'CFS' }

if int(NDO_DLTSW)==3 {
	define DO_req_flw1_out {alias DO_req_flw1 KIND 'FLOW-REQ-NDOI' UNITS 'CFS' }
	define DO_req_flw2_out {alias DO_req_flw2 KIND 'FLOW-REQ-NDOI' UNITS 'CFS' }
	define DO_req_flw3_out {alias DO_req_flw3 KIND 'FLOW-REQ-NDOI' UNITS 'CFS' }
	define DO_req_flw4_out {alias DO_req_flw4 KIND 'FLOW-REQ-NDOI' UNITS 'CFS' }
}

!Create aliases for number of days used for each standard
define daysreqX2roe_out {alias int(endday_roe) - int(begday_roe) + 1 KIND 'DAYS-REQ-X2ROE' UNITS 'CFS'}
define daysreqX2chs_out {alias int(endday_chs) - int(begday_chs) + 1 KIND 'DAYS-REQ-X2CHS' UNITS 'CFS'}
define daysreqX2cnf_out {alias int(endday_cnf) - int(begday_cnf) + 1 KIND 'DAYS-REQ-X2CNF' UNITS 'CFS'}
define daysreqflow_out {alias int(endday_flw) - int(begday_flw) + 1 KIND 'DAYS-REQ-NDOI' UNITS 'CFS' }

!goal meetMRDO {D_DeltaReqd < MRDO_final}  ! Set the final Delta outflow requirement 

! DO requirement goal including HOS Apr - May releases from Oroville
goal minflowDO {
    lhs D_DeltaReqd
    case AM {
        condition month>=APR .and. month<=MAY .and. int(ESO_ON)==1
        rhs MRDO_final + ORO_relfish
        lhs<rhs constrain}
    case other {
        condition always
        rhs MRDO_final
        lhs<rhs constrain} 
        }