/*************************************
lastX2_ANN_KM.wresl
 
Hao Xie 7/6/2010


THIS code calculates the last month X2
X2 is the 2ppt bottom isohaline line used to describe the entrapment zone.
The position as a function of last month's position and current month's Net Delta outflow

*************************************/


! total of mrdo and surplus
define NDO {std kind 'FLOW-NDO' units 'CFS'}
goal setNDO {NDO = D_DeltaReqd + C_Delta}

! ******************************************************************************************
! Get last timestep's X2 position using ANN
! calculate previous timestep's value of X2

define X2_prv {std kind 'X2-POSITION-PREV' units 'KM'}

! coefficients used in K-M equation
define a_x2_coef {value 10.16}
define b_x2_coef {value 0.945}
define c_x2_coef {value 1.487}

define X2_last {

  case KM_X2{
    condition X2_ANN_KM ==1
      value a_x2_coef + b_x2_coef*X2_prv(-1) - c_x2_coef*LOG10(NDO(-1)) }
  
  case lastWaterYear {
    condition  month == Oct .and. X2_ANN_KM ==0 
      value  ANN_X2(
               X2_PRV(-5),X2_PRV(-4),X2_PRV(-3),X2_PRV(-2),X2_PRV(-1),
               NDO(-5),NDO(-4),NDO(-3),NDO(-2),NDO(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(monthly_avg),12,(wateryear-1))}

  case others {
    condition always
      value  Ann_X2(
               X2_PRV(-5),X2_PRV(-4),X2_PRV(-3),X2_PRV(-2),X2_PRV(-1),
               NDO(-5),NDO(-4),NDO(-3),NDO(-2),NDO(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(monthly_avg),(month-1),wateryear)}
}

goal X2lastperiod {X2_prv=X2_last}      ! output purposes only

!define X2_prv_2daysum {sum(i=-2,-1,1) X2_prv(i)}
!define X2_prv_3dayavg {std kind 'X2-POSITION-PREV' units 'KM'}
!goal set_X2_prv_3rollavg { X2_prv_3dayavg = (X2_prv_2daysum +  X2_prv)/3 }

! Calculate 14-day running average because Spring X2 can be met if X2 position is equal to or further than the Confluence position
define X2_prv_13daysum {sum(i=-13,-1,1) X2_prv(i)}
define X2_prv_14dayavg {std kind 'X2-POSITION-PREV' units 'KM'}
define X2_last_14dayavg {value (X2_prv_13daysum +  X2_last)/14}
goal set_X2_prv_14rollavg { X2_prv_14dayavg = X2_last_14dayavg}
