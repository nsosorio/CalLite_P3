/************************************
RockSlough_data.wresl

Hao Xie DWR 6/24/2010

ARTIFICIAL NEURAL NETWORK IMPLEMENTATION - CONTRA COSTA-ROCK SLOUGH CORRELATION

************************************/

! calculate previous month's value of salinity (using ann directly)
define RS_EC_Month_sv {
                  case DRegsOff{
                    condition RS_DLTSW == 0
                    value 99000.0}
  case lastWaterYear {
    condition  month == Oct
      value  AnnEC(C_Hood(-5),C_Hood(-4),C_Hood(-3),C_Hood(-2),C_Hood(-1),
               D_ExpTD(-5),D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
               SJR_ANN(-5),SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),
               DXC_daysopen(-5),DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(RS),int(monthly_avg),12,(wateryear-1))}
  case others {
    condition always
      value  AnnEC(C_Hood(-5),C_Hood(-4),C_Hood(-3),C_Hood(-2),C_Hood(-1),
               D_ExpTD(-5),D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
               SJR_ANN(-5),SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),
               DXC_daysopen(-5),DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(RS),int(monthly_avg),(month-1),wateryear)}
}


! This is DWR's equation used previously
!define RS_CL_Month_sv {value 0.268*RS_EC_Month_sv - 23.6}

! This is CCWD's first approximation (Matt Moses, July 2006)
! Use Maximum of the following two equations:
!   Cl = 0.285*EC - 50    (this is the 'seawater' line)
!   Cl = 0.15*EC - 12      (this is the 'ag. drainage' line)
! These two equations intercept at Cl=30.222... and EC=281.481481481...
define RS_CL_Month_sv {value max(0.285*RS_EC_Month_sv - 50.,
                                 0.150*RS_EC_Month_sv - 12.)}

define RS_EC_Month {std kind 'SALINITY' units 'UMHOS/CM'}
define RS_CL_Month {std kind 'SALINITY' units 'MG/L'}
goal setRS_EC_MON {RS_EC_Month = RS_EC_Month_sv}
goal setRS_CL_Month {RS_CL_Month = RS_CL_Month_sv}

!****************************************************************************************

! define the CL standard for Contra Costa Canal
define RS_CL_STD_sv {select CLstandard1
                     from   salinity_std_rsl
                     where  month=month,wyt=wyt_ann}
define RS_CL_STD {std kind 'SALINITY' units 'MG/L'}
goal setRS_CL_STD {RS_CL_STD = RS_CL_STD_sv}

! This is DWR's equation used previously
!define RS_EC_STD_sv {value (RS_CL_STD_sv + 23.6)/0.268 }

! This is CCWD's first approximation (Matt Moses, July 2006)
! Use Maximum of the following two equations:
!   Cl = 0.285*EC - 50    (this is the 'seawater' line)
!   Cl = 0.15*EC - 12      (this is the 'ag. drainage' line)
! These two equations intercept at Cl=30.222... and EC=281.481481481...
define RS_EC_STD_sv {
    case low {
    condition RS_CL_STD_sv <= 30.222
    value (RS_CL_STD_sv + 12)/0.15}
    case high {
    condition always
    value (RS_CL_STD_sv + 50)/0.285}
}

define RS_EC_STD {std kind 'SALINITY' units 'UMHOS/CM'}
goal setRS_EC_STD {RS_EC_STD = RS_EC_STD_sv}

!sometimes used for #2&3 if #1 is infeasible (always try to meet the 225 mg/l std)
! This is DWR's equation used previously
!define RS_EC_STD_225 {value (225. + 23.6)/0.268}
! This is CCWD's first approximation (Matt Moses, July 2006) - see notes above
define RS_EC_STD_225 {value (225. + 50)/0.285}

!*************************************************************************************************************
!**************   Partition linearization into 3 segments   *****************************
!*************************************************************************************************************

!get the slope (m) and intercept (b) for the 3-piece linearization.
!each constraint is in the form Exports <= m * SacFlow + b

!*****Linearization #1***************************************************************
define RS_b_1_sv {
                  case DRegsOff{
                    condition RS_DLTSW == 0
                    value 999990.0}
  case D1641 {
  condition always
  value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_1_lo,line_RS_1_hi,
                    int(RS),int(intercept),int(ann_type),month,wateryear,1)
                     }
}
define RS_m_1_sv {
  case DRegsOff{
     condition RS_DLTSW == 0
     value 0.0}
  case reducecalls {
    condition  RS_b_1_sv >= 999990.
    value 0.}
  case call {
    condition always
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_1_lo,line_RS_1_hi,
                    int(RS),int(slope),int(ann_type),month,wateryear,1)}
}
define RS_m_1 {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define RS_b_1 {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setRS_m_1 {RS_m_1 = RS_m_1_sv}
goal setRS_b_1 {RS_b_1 = RS_b_1_sv}

!*****Linearization #2***************************************************************
define RS_b_2_sv {
  case DRegsOff{
    condition RS_DLTSW == 0
    value 0.0}
  case line1infeas {
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_225,line_RS_2_lo,line_RS_2_hi,
                    int(RS),int(intercept),int(ann_type),month,wateryear,2)}
  case call {
    condition always
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_2_lo,line_RS_2_hi,
                    int(RS),int(intercept),int(ann_type),month,wateryear,2)}
}
define RS_m_2_sv {
  case DRegsOff{
    condition RS_DLTSW == 0
    value 0.0}

  case reducecalls {
    condition  RS_b_2_sv >= 999990.
    value 0.}
  case line1infeas {
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_225,line_RS_2_lo,line_RS_2_hi,
                    int(RS),int(slope),int(ann_type),month,wateryear,2)}
  case call {
    condition always
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_2_lo,line_RS_2_hi,
                    int(RS),int(slope),int(ann_type),month,wateryear,2)}
}
define RS_m_2 {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define RS_b_2 {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setRS_m_2 {RS_m_2 = RS_m_2_sv}
goal setRS_b_2 {RS_b_2 = RS_b_2_sv}

!*****Linearization #3***************************************************************
define RS_b_3_sv {
   case DRegsOff{
    condition RS_DLTSW == 0
    value 999999.0}
  case Linear1And2Fail {
    condition RS_b_2_sv == 999998.0 .and. RS_b_1_sv == 999998.0
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_3_lo,line_RS_3_hi,
                    int(RS),int(intercept),int(ann_type),month,wateryear,4)}
  case line1infeas {
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_225,line_RS_3_lo,line_RS_3_hi,
                    int(RS),int(intercept),int(ann_type),month,wateryear,3)}
  case call {
    condition always
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_3_lo,line_RS_3_hi,
                    int(RS),int(intercept),int(ann_type),month,wateryear,3)}
}
define RS_m_3_sv {
                  case DRegsOff{
                    condition RS_DLTSW == 0
                    value 0.0}
  case reducecalls {
    condition  RS_b_3_sv >= 999990.
    value 0.}
  case call {
    condition RS_b_2_sv == 999998.0 .and. RS_b_1_sv == 999998.0
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_3_lo,line_RS_3_hi,
                    int(RS),int(slope),int(ann_type),month,wateryear,4)}
  case line1infeas {
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_225,line_RS_3_lo,line_RS_3_hi,
                    int(RS),int(slope),int(ann_type),month,wateryear,3)}
  case final {
    condition always
    value  AnnLineGen(C_Hood_ANN(-4),C_Hood_ANN(-3),C_Hood_ANN(-2),C_Hood_ANN(-1),
                    D_ExpTD(-4),D_ExpTD(-3),D_ExpTD(-2),D_ExpTD(-1),
                    SJR_ANN(-4),SJR_ANN(-3),SJR_ANN(-2),SJR_ANN(-1),SJR_ann_est,
                    DXC_daysopen(-4),DXC_daysopen(-3),DXC_daysopen(-2),DXC_daysopen(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VERNWQFINALsv,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    RS_EC_STD_sv,line_RS_3_lo,line_RS_3_hi,
                    int(RS),int(slope),int(ann_type),month,wateryear,3)}
}
define RS_m_3 {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define RS_b_3 {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setRS_m_3 {RS_m_3 = RS_m_3_sv}
goal setRS_b_3 {RS_b_3 = RS_b_3_sv}

!********************************************************************
!Get the required Sac flow for ZERO exports
define RS_Sac_ZeroExp_sv1 {
  case DRegsOff{
    condition RS_DLTSW == 0
    value 0.0}
  case LowCL {
    condition C_Hood_ANN(-1) >= 40000.
    value  0.}
  case NoSalinityControlPossible{
    condition abs(RS_m_1_sv) <= 0.001 .and. int(RS_b_1_sv) == 0
    value 0.}
  case NegSlope{
    condition RS_m_1_sv <= 0.0
    value 0.}
  case LargeNegInt{
    condition RS_b_1_sv < -10000.0
    value 0.}
  case control{
    condition always
    value -RS_b_1_sv/RS_m_1_sv}
}
define RS_Sac_ZeroExp_sv2 {value max(0.0,RS_Sac_ZeroExp_sv1)}
define RS_Sac_ZeroExp {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRS_Sac_ZeroExp {RS_Sac_ZeroExp = RS_Sac_ZeroExp_sv2}


