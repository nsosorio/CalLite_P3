/*************************************
demands_70.wresl
 
Tom FitzHugh BOR 5/20/2010

Handles demand/delivery logic for DSA70.  The deliveries covered here are aggregated into CalLite 
deliveries at nodes SacAmerican, Folsom, and Nimbus.
**************************************/

/*** NOTE: All this code is copied from Calsim, but note that in the definitions of adj_D167b_pmi etc.
below, the timeseries annual demand (e.g. dem_D167b_pmi_a) is always identical to the demand from 
America_PRJ_WR.table (dem1_D167b_pmi_a).  So using both demands doesn't seem necessary.  But leaving 
for now to replicate Calsim ***/

! Define contract demand limits.  Uses minimum of value from timeseries of annual demands (adjusted
! for cutbacks) and value from American_PRJ_WR.table, which is then multiplied by monthly percent.  
! Exceptions are D162 demands, which only use the timeseries adjusted for cutbacks.
/*** SacAmerican node deliveries ***/

! Sac County WA (SMUD transfer)   Annual project demand
define dem1_D167b_pmi_a {    
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select SCWA_167b from American_PRJ_WR_2030 where index=2}
    case otherwise{
        condition always
        select SCWA_167b from American_PRJ_WR_2005 where index=2}}

define adj_D167b_pmi {value min(dem_D167b_pmi_a, dem1_D167b_pmi_a * perdel_cvpmi_sys) * perdem_70SCWA * taf_cfs} !Adjust contract amount for CVP cuts
 
/*** Folsom node deliveries ***/
! Folsom city   Annual project demand - PL 101-514
define dem1_D8b_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select Folsom from American_PRJ_WR_2030 where index=3}
    case otherwise{
        condition always
        select Folsom from American_PRJ_WR_2005 where index=3}}

define adj_D8b_pmi_ann {value min(dem_D8b_pmi_ann, dem1_D8b_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D8b_pmi {value adj_D8b_pmi_ann * perdem_70Fol * taf_cfs}

! San Juan Water District SAC County   Annual project demand
define dem1_D8e_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select SJWD from American_PRJ_WR_2030 where index=2}
    case otherwise{
        condition always
        select SJWD from American_PRJ_WR_2005 where index=2}}

 !Annual project demand
define adj_D8e_pmi_ann {value min(dem_D8e_pmi_ann, dem1_D8e_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D8e_pmi {value adj_D8e_pmi_ann * perdem_70SJWDS * taf_cfs}

! El Dorado ID   Annual project demand - NOT PL 101-514
define dem1_D8f_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select ElDorID from American_PRJ_WR_2030 where index=2}
    case otherwise{
        condition always
        select ElDorID from American_PRJ_WR_2005 where index=2}}

define adj_D8f_pmi_ann {value min(dem_D8f_pmi_ann, dem1_D8f_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D8f_pmi {value adj_D8f_pmi_ann * perdem_70ElDor * taf_cfs}

! City of Roseville  Annual project demand
define dem1_D8g_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select Roseville_8g from American_PRJ_WR_2030 where index=2}
    case otherwise{
        condition always
        select Roseville_8g from American_PRJ_WR_2005 where index=2}}

define adj_D8g_pmi_ann {value min(dem_D8g_pmi_ann, dem1_D8g_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D8g_pmi {value adj_D8g_pmi_ann * perdem_70Rose * taf_cfs}

! Placer County Water Agency (CVP project) - at Folsom Urban Intake  Annual project demand
define dem1_D8h_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select PCWA_8h from American_PRJ_WR_2030 where index=2}
    case otherwise{
        condition always
        select PCWA_8h from American_PRJ_WR_2005 where index=2}}

define adj_D8h_pmi_ann {value min(dem_D8h_pmi_ann, dem1_D8h_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D8h_pmi {value adj_D8h_pmi_ann * perdem_70pcwa * taf_cfs}

! El Dorado County P.L. 101-514  Annual project demand - PL 101-514
define dem1_D8i_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select ElDorID from American_PRJ_WR_2030 where index=3}
    case otherwise{
        condition always
        select ElDorID from American_PRJ_WR_2005 where index=3}}
 
define adj_D8i_pmi_ann {value min(dem_D8i_pmi_ann, dem1_D8i_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D8i_pmi {value adj_D8i_pmi_ann * perdem_70ElDorCo * taf_cfs}

/*** Nimbus node deliveries ***/
! California Parks and Rec  Annual project demand
define dem1_D9ab_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select CalPrkRc from American_PRJ_WR_2030 where index=2}
    case otherwise{
        condition always
        select CalPrkRc from American_PRJ_WR_2005 where index=2}}

define adj_D9ab_pmi_ann {value min(dem_D9ab_pmi_ann, dem1_D9ab_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D9ab_pmi {value adj_D9ab_pmi_ann * perdem_70CARec * taf_cfs}

! SMUD export Folsom South Canal  Annual project demand
define dem1_D9b_pmi_a {
    case Future{
        condition int(LOD_DLTSW) >= 1 
        select SMUD_9b from American_PRJ_WR_2030 where index=2}
    case otherwise{
        condition always
        select SMUD_9b from American_PRJ_WR_2005 where index=2}}

define adj_D9b_pmi_ann {value min(dem_D9b_pmi_ann, dem1_D9b_pmi_a * perdel_cvpmi_sys)} !Adjust contract amount for CVP cuts
define adj_D9b_pmi {value adj_D9b_pmi_ann * perdem_70SMUD * taf_cfs}

!Set up DSA 70 diversion arc (and sub arc) splits
define d162_prj     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d162_psc     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d162_pmi     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}   !8/11/15, AA: Updated based on CalSim II 2015DCR.
define d162a_psc    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d162b_psc    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d162c_psc    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
goal set_d162_prj   {d162_prj = d162_psc}            !8/11/15, AA: Updated based on CalSim II 2015DCR.
!goal set_d162_prj   {d162_prj = d162_psc + d162_pmi}  !8/11/15, AA: Updated based on CalSim II 2015DCR.
goal set_d162_psc   {d162_psc = d162a_psc + d162b_psc + d162c_psc} 

define d167_prj     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d167_pmi     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d167b_pmi     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
goal set_d167_pmi   {d167_pmi = d167b_pmi}
goal set_d167_prj   {d167_prj = d167_pmi}

define d8_prj     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d8_pmi     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d8b_pmi    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d8e_pmi    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d8f_pmi    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d8g_pmi    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d8h_pmi    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d8i_pmi    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
goal set_d8_prj   {d8_prj = d8_pmi}
goal set_d8_pmi   {d8_pmi = d8b_pmi + d8e_pmi + d8f_pmi + d8g_pmi + d8h_pmi + d8i_pmi}

define d9_prj      {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d9_pmi      {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d9_pag      {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d9a_pmi     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d9ab_pmi    {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'} 
define d9b_pmi     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
define d9b_pag     {STD KIND 'FLOW-DELIVERY' UNITS 'CFS'}
/* removed d9_pls from this goal below since that is now in D_Nimbus_NP */
goal set_d9_prj    {d9_prj = d9_pmi + d9_pag}
goal set_d9_pmi1   {d9_pmi = d9a_pmi + d9b_pmi}
goal set_d9_pag    {d9_pag = d9b_pag}
goal set_d9_pmi2   {d9_pmi = d9ab_pmi + d9b_pmi} 

!Set the upper limit for the allocations of demand arcs 
/*** Note sure if all of these statements are necessary (from demands_70.wresl), since 
the goals at the end of this file (from cvp_bound_del_sys.wresl) do the same thing
but incorporate diversion requirements and cuts in contract demands too ... but leaving
here for now ***/
goal limit_d162a_psc {d162a_psc < dem_D162a_psc} 
goal limit_d162b_psc {d162b_psc < dem_D162b_psc} 
goal limit_d162c_psc {d162c_psc < dem_D162c_psc} 

goal limit_d167b_pmi {d167b_pmi < adj_D167b_pmi}

goal limit_d8b_pmi {d8b_pmi < adj_D8b_pmi} 
goal limit_d8e_pmi {d8e_pmi < adj_D8e_pmi} 
goal limit_d8f_pmi {d8f_pmi < adj_D8f_pmi} 
goal limit_d8g_pmi {d8g_pmi < adj_D8g_pmi} 
goal limit_d8h_pmi {d8h_pmi < adj_D8h_pmi} 
goal limit_d8i_pmi {d8i_pmi < adj_D8i_pmi}

goal limit_d9ab_pmi {d9ab_pmi < adj_D9ab_pmi} 
goal limit_d9b_pmi  {d9b_pmi < adj_D9b_pmi} 
goal limit_d9_pag   {d9_pag < 0.}

! This constraint prevents diversions from D162, D8 and D300 from circumventing the DSA70 Diversion Requirement
! accidentally through the imported water spill arc C308
/*** Is this still needed in some form??? Probably not, but leaving commented here for now ***/
!goal limit_C308 {C308 < C225 - D308A}

! Defines adjusted contract demands (most of these were already computed at the top of this file)
define ad_d162a_psc {value perdel_cvpsc_sys * dem_d162a_psc}
define ad_d162b_psc {value perdel_cvpsc_sys * dem_d162b_psc}
define ad_d162c_psc {value perdel_cvpsc_sys * dem_d162c_psc}
define ad_d167b_pmi {value adj_d167b_pmi}
define ad_d8b_pmi  {value adj_d8b_pmi}
define ad_d8e_pmi  {value adj_d8e_pmi}
define ad_d8f_pmi  {value adj_d8f_pmi}
define ad_d8g_pmi  {value adj_d8g_pmi}
define ad_d8h_pmi  {value adj_d8h_pmi}
define ad_d8i_pmi  {value adj_d8i_pmi}
/* I don't understand why 9ab is being switched to 9a here, but leaving to replicate Calsim */
define ad_d9a_pmi  {value adj_d9ab_pmi}
define ad_d9b_pmi  {value adj_d9b_pmi} ! Does not contribute to Diversion Requirement

/* NOTE: Calsim also includes ad_d300_pmi in the sum below.  Left out here because D300 is upstream
of CalLite Folsom inflow I_Folsm, and this shouldn't matter because the time series for dem_d300_pmi_ann
is all 0s, so there would never be deliveries here anyway */
!***************************************************
define ad_sum_70_prj    {value max((ad_d162a_psc + ad_d162b_psc + ad_d162c_psc + ad_d167b_pmi +
                    ad_d8b_pmi + ad_d8e_pmi + ad_d8f_pmi + ad_d8g_pmi + ad_d8h_pmi + ad_d8i_pmi +
                    ad_d9a_pmi),
                    0.00001)}

!Now define the amount to reduce the Allowable Diversions by to equal the Project Diversion Requirement
define extra_70_prj {value max((ad_sum_70_prj - prj_dr70*taf_cfs - prj_dr70_imi*taf_cfs + minpump_70_prj*taf_cfs), 0.0)}

define ad_sum_70_prjdv {alias ad_sum_70_prj units 'cfs'}
define extra_70_prjdv  {alias extra_70_prj  units 'cfs'}

define extra_d162a_psc {value extra_70_prj*(ad_d162a_psc/ad_sum_70_prj)}
define extra_d162b_psc {value extra_70_prj*(ad_d162b_psc/ad_sum_70_prj)}
define extra_d162c_psc {value extra_70_prj*(ad_d162c_psc/ad_sum_70_prj)}
define extra_d167b_pmi {value extra_70_prj*(ad_d167b_pmi/ad_sum_70_prj)}
define extra_d8b_pmi   {value extra_70_prj*(ad_d8b_pmi/ad_sum_70_prj)}
define extra_d8e_pmi   {value extra_70_prj*(ad_d8e_pmi/ad_sum_70_prj)}
define extra_d8f_pmi   {value extra_70_prj*(ad_d8f_pmi/ad_sum_70_prj)}
define extra_d8g_pmi   {value extra_70_prj*(ad_d8g_pmi/ad_sum_70_prj)}
define extra_d8h_pmi   {value extra_70_prj*(ad_d8h_pmi/ad_sum_70_prj)}
define extra_d8i_pmi   {value extra_70_prj*(ad_d8i_pmi/ad_sum_70_prj)}
define extra_d9a_pmi   {value extra_70_prj*(ad_d9a_pmi/ad_sum_70_prj)}

!**************  FINAL GOALS for DSA 70 percent deliveries  *************
goal reduce_d162a_psc      {d162a_psc < ad_d162a_psc - extra_d162a_psc}
goal reduce_d162b_psc      {d162b_psc < ad_d162b_psc - extra_d162b_psc}
goal reduce_d162c_psc      {d162c_psc < ad_d162c_psc - extra_d162c_psc}
goal reduce_d167b_pmi      {d167b_pmi < ad_d167b_pmi - extra_d167b_pmi}
goal reduce_d8b_pmi        {d8b_pmi < ad_d8b_pmi - extra_d8b_pmi}
goal reduce_d8e_pmi        {d8e_pmi < ad_d8e_pmi - extra_d8e_pmi}
goal reduce_d8f_pmi        {d8f_pmi < ad_d8f_pmi - extra_d8f_pmi}
goal reduce_d8g_pmi        {d8g_pmi < ad_d8g_pmi - extra_d8g_pmi}
goal reduce_d8h_pmi        {d8h_pmi < ad_d8h_pmi - extra_d8h_pmi}
goal reduce_d8i_pmi        {d8i_pmi < ad_d8i_pmi - extra_d8i_pmi}
goal reduce_d9a_pmi        {d9a_pmi < ad_d9a_pmi - extra_d9a_pmi}
goal reduce_d9b_pmi        {d9b_pmi < ad_d9b_pmi}


