! cycle5out.wresl
! Edward Chang
! 5/01/2000
! This file writes selective cycle 1 output to DSS
! Revised by C. Hsu, 3/12/03, USBR, for review and documentation project
!##########################################################################
/*
Cycle 5
The following WRESL code is used in cycle 6 to write out intermediate solver computations
that are made in the SJR module.  This may be needed to verify output computations that
are based on cycle5 because the final output is the monthly weighted flows and storages,
not what may be in each 10, 14, 15, or 16 day period.
*/
! Define New Melones flows for cycle 5 output
define C_MELONcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define New Melones main channelm flows for cycle 5 output
define C_MELONmcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define New Melones water quality flows for cycle 5 output
define C_MELONWQcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define New Melones dissolved oxygen flows for cycle 5 output
define C_MELONDOcycle5 {std kind 'flow-cycle5' units 'cfs' }
!define C_MELONVAMPcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define New Melones VAMP flows for cycle 5 output
define C_STANGDWNVAMPcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define Mendota Pool/Exchange Contractors flow for cycle 5 output
define D_MDOTABcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define Sack Dam/Exchange Contractors flow for cycle 5 output
define D608Bcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define Lower DMC flow for cycle 5 output
define C_CVPDMCCYCLE5 {std kind 'flow-cycle5' units 'cfs' }
! Define Mendota Pool VAMP flow for cycle 5 output
define C_MDOTABVAMPcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Delivery to SSJID area cycle 5 output
define C522cycle5 {std kind 'flow-cycle5' units 'cfs' }
!define I522cycle5 {std kind 'flow-cycle5' units 'cfs' }
!define I563cycle5 {std kind 'flow-cycle5' units 'cfs' }
!define I543cycle5 {std kind 'flow-cycle5' units 'cfs' }
! This node doesn't exist any more (CH)
define C563cycle5 {std kind 'flow-cycle5' units 'cfs' }
! This node doesn't exist any more (CH)
define C543cycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define Merced River below McClure flow for cycle 5 output
define C_MCLREcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define Don Pedro main channel flow for cycle 5 output
define C_PEDROcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define McClure main channel flow for cycle 5 output
define C_MCLREmcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define New Don Pedro main channel flow for cycle 5 output
define C_PEDROmcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define McClure VAMP flow for cycle 5 output
define C_MCLREvampcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define New Don Pedro VAMP flow for cycle 5 output
define C_PEDROvampcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define flow in Reach C_STANGDWN for cycle 5 output
define C_STANGDWNcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define flow in Reach C_STANRIPN for cycle 5 output
define C_STANRIPNcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define flow below Vernalis for cycle 5 output
define C_SJRVERcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Set New Melones flow for cycle 5 output (VAMP and DO) 
goal outC_MELONcycle5 {C_MELONcycle5 = C_MELON[VAMP_AND_DO]}
! New Melones main channel flow for cycle 5 output (VAMP and DO) 
goal outC_MELONmcycle5 {C_MELONMcycle5 = C_MELONM[VAMP_AND_DO]} 
! Set New Melones water quality flow for cycle 5 output (VAMP and DO) 
goal outC_MELONWQcycle5 {C_MELONWQcycle5 = C_MELONWQ[VAMP_AND_DO]}
! Set New Melones DO flow for cycle 5 output (VAMP and DO)  
goal outC_MELONDOcycle5 {C_MELONDOcycle5 = C_MELONDO[VAMP_AND_DO]}
!goal outC_MELONVAMPcycle5 {C_MELONVAMPcycle5 = C_MELONVAMP[VAMP_AND_DO]}
! New Melones Reach C_STANGDWN VAMP cycle 5 output (VAMP and DO)  
goal outC_STANGDWNVAMPcycle5 {C_STANGDWNVAMPcycle5 = C_STANGDWNVAMP[VAMP_AND_DO]}
! Mendota Pool/Exchange Contractors cycle 5 output (VAMP and DO)   
goal outD_MDOTABcycle5 {D_MDOTABcycle5 = D_MDOTAB[VAMP_AND_DO]}
! Sack Dam/Exchange Contractors cycle 5 output (VAMP and DO)   
goal outD608Bcycle5 {D608Bcycle5 = D608B[VAMP_AND_DO]}
! Lower DMC to Mendota Pool cycle 5 output
goal outC_CVPDMCcycle5 {C_CVPDMCcycle5 = C_CVPDMC[VAMP_AND_DO]}
! Pool Exchange donation to VAMP cycle 5 output
goal outC_MDOTABVAMPcycle5 {C_MDOTABVAMPcycle5 = C_MDOTABVAMP[VAMP_AND_DO]}
!goal outC522cycle5 {C522cycle5 = C522[VAMP_AND_DO]}
!goal outI522cycle5 {I522cycle5 = I522[VAMP_AND_DO]}
!goal outI563cycle5 {I563cycle5 = I563[VAMP_AND_DO]}
!goal outI543cycle5 {I543cycle5 = I543[VAMP_AND_DO]}
!goal outC563cycle5 {C563cycle5 = C563[VAMP_AND_DO]}
!goal outC543cycle5 {C543cycle5 = C543[VAMP_AND_DO]}
! Set Merced River cycle 5 output
goal outC_MCLREcycle5 {C_MCLREcycle5 = C_MCLRE[VAMP_AND_DO]}
! Don Pedro cycle 5 output
goal outC_PEDROcycle5 {C_PEDROcycle5 = C_PEDRO[VAMP_AND_DO]}
! McClure main channel cycle 5 output
goal outC_MCLREmcycle5 {C_MCLREMcycle5 = C_MCLREM[VAMP_AND_DO]}
! Don Pedro VAMP cycle 5 output
goal outC_PEDROmcycle5 {C_PEDROMcycle5 = C_PEDROM[VAMP_AND_DO]}
! McClure VAMP cycle 5 output
goal outC_MCLREvampcycle5 {C_MCLREVAMPcycle5 = C_MCLREVAMP[VAMP_AND_DO]}
! Don Pedro VAMP cycle 5 output
goal outC_PEDROvampcycle5 {C_PEDROVAMPcycle5 = C_PEDROVAMP[VAMP_AND_DO]}
! New Melones Reach C_STANGDWN cycle 5 output
goal outC_STANGDWNcycle5 {C_STANGDWNcycle5 = C_STANGDWN[VAMP_AND_DO]}
! New Melones Reach C_STANRIPN cycle 5 output
goal outC_STANRIPNcycle5 {C_STANRIPNcycle5 = C_STANRIPN[VAMP_AND_DO]}
! SJR below Vernalis cycle 5 output
goal outC_SJRVERcycle5 {C_SJRVERcycle5 = C_SJRVER[VAMP_AND_DO]}
! Define New Melones mainstem VAMP cycle 5 flow for output
define C_MELONVAMP_Mcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define New Melones VAMP transfer cycle 5 flow for output
define C_MELONVAMP_Tcycle5 {std kind 'flow-cycle5' units 'cfs' }
! Define Don Pedro Stanislaus VAMP cycle 5 for output
define C_PEDRO_stan_vampc5 {std kind 'flow-cycle5' units 'cfs' }
! Set New Melones mainstem VAMP cycle 5 for output 
goal outC_MELONVAMP_Mcycle5 {C_MELONVAMP_Mcycle5 = C_MELONVAMP_M[VAMP_AND_DO]}
! Set New Melones mainstem VAMP transfer cycle 5 for output 
goal outC_MELONVAMP_Tcycle5 {C_MELONVAMP_Tcycle5 = C_MELONVAMP_T[VAMP_AND_DO]}
! Set Don Pedro Stanislaus VAMP cycle 5 for output
goal outC_PEDRO_stan_vampcycle5 {C_PEDRO_STAN_VAMPc5 = C_PEDRO_STAN_VAMP[VAMP_AND_DO]}
! Define Don Pedro minflow for cycle 5
define C_TUOL_MIFcycle5 {std kind 'flowmin-cycle5' units 'cfs'}
! Set Don Pedro minflow cycle 5 for output 
goal outC_TUOL_MIFc5 {C_TUOL_MIFcycle5 = C_TUOL_MIF[VAMP_AND_DO]}
! Define Don Pedro minflow in cycle 5 for output 
define D_TUOLB_cycle5 {std kind 'flow-cycle5' units 'cfs'}
! Set Tuolumne to Modesto turnout in cycle 5 for output
goal outD_TUOLB_c5 {D_TUOLB_cycle5 = D_TUOLB[VAMP_AND_DO]}

define VAMP_req_c5 {std kind 'flow-requirement' units 'cfs'}
goal outVAMP_req_c5 {
    lhs VAMP_req_c5
    case OctMar {
        condition month<APR
        rhs 0.0 }
    case AprMay {
        condition month==APR .or. month==MAY
        rhs VAMP_reqdv[VAMP_AND_DO]}
    case JunSep {
        condition month>MAY
        rhs 0. }
}


define C_MLRTNM_c5          {std kind 'flow-cycle5' units 'cfs'}
define C_MLRTNA_c5          {std kind 'flow-cycle5' units 'cfs'}
define C_MLRTNF_c5          {std kind 'flow-cycle5' units 'cfs'}
define C_GRAVF_c5          {std kind 'flow-cycle5' units 'cfs'}
define C_GRAVF_loss_c5     {std kind 'flow-cycle5' units 'cfs'}
define C_GRAVF_main_c5     {std kind 'flow-cycle5' units 'cfs'}
define C_GRAVF_mainsjrrc5  {std kind 'flow-cycle5' units 'cfs'}
define C_GRAVF_mainsmflc5  {std kind 'flow-cycle5' units 'cfs'}
define C_SJRCB_c5         {std kind 'flow-cycle5' units 'cfs'}
define C_SJRCB_main_c5    {std kind 'flow-cycle5' units 'cfs'}
define C_SJRCB_flood_c5   {std kind 'flow-cycle5' units 'cfs'}
define C_Chowbyp1_c5         {std kind 'flow-cycle5' units 'cfs'}
define C_SJRREST_c5         {std kind 'flow-cycle5' units 'cfs'}

goal set_c58M_c5            {C_MLRTNM_c5 = C_MLRTNM[VAMP_AND_DO]}
goal set_c58A_c5            {C_MLRTNA_c5 = C_MLRTNA[VAMP_AND_DO]}
goal set_c58F_c5            {C_MLRTNF_c5 = C_MLRTNF[VAMP_AND_DO]}
goal set_C_GRAVF_c5            {C_GRAVF_c5 = C_GRAVF[VAMP_AND_DO]}
goal set_C_GRAVF_loss_c5       {C_GRAVF_loss_c5 = C_GRAVF_loss[VAMP_AND_DO]}
goal set_C_GRAVF_main_c5       {C_GRAVF_main_c5 = C_GRAVF_main[VAMP_AND_DO]}
goal set_C_GRAVF_mainsjrrc5    {C_GRAVF_mainsjrrc5 = C_GRAVF_mainsjrr[VAMP_AND_DO]}
goal set_C_GRAVF_mainsmflc5    {C_GRAVF_mainsmflc5 = C_GRAVF_mainsmfl[VAMP_AND_DO]}
goal set_C_SJRCB_c5           {C_SJRCB_c5 = C_SJRCB[VAMP_AND_DO]}
goal set_C_SJRCB_main_c5      {C_SJRCB_main_c5 = C_SJRCB_main[VAMP_AND_DO]}
goal set_C_SJRCB_flood_c5     {C_SJRCB_flood_c5 = C_SJRCB_flood[VAMP_AND_DO]}
goal set_C_Chowbyp1_c5           {C_Chowbyp1_c5 = C_Chowbyp1[VAMP_AND_DO]}
goal set_C_SJRREST_c5           {C_SJRREST_c5 = C_SJRREST[VAMP_AND_DO]}

define C_MLRTN_c5 {alias C_MLRTN[VAMP_AND_DO] kind 'flow-cycle5' units 'cfs'}
define C_MDOTA_c5 {alias C_MDOTA[VAMP_AND_DO] kind 'flow-cycle5' units 'cfs'}
define C_SJRSACK_c5 {alias C_SJRSACK[VAMP_AND_DO] kind 'flow-cycle5' units 'cfs'}
define C_SJRLNDR_c5 {alias C_SJRLNDR[VAMP_AND_DO] kind 'flow-cycle5' units 'cfs'}
define C_TUOL_c5 {alias C_TUOL[VAMP_AND_DO] kind 'flow-cycle5' units 'cfs'}

define I18_rest_bal_c5 {alias I18_rest_bal[VAMP_AND_DO] kind 'flow-cycle5' units 'cfs'}

define DO_req_relDVC5 {std kind 'flow-cycle5' units 'cfs'}
goal outDO_req_relDVC5 {
    lhs DO_req_relDVC5
    case VAMPDO {
        condition month>MAR
        rhs DO_req_relDV[VAMP_AND_DO]}
    case otherwise {
        condition month<APR
        rhs 0.0}
}
define DO_req_DVC5 {std kind 'flow-cycle5' units 'cfs'}
goal outDO_req_DVC5 {
    lhs DO_req_DVC5
    case VAMPDO {
        condition month>MAR
        rhs DO_req_DV[VAMP_AND_DO]*taf_cfs}
    case otherwise {
        condition month<APR
        rhs 0.0}
}

